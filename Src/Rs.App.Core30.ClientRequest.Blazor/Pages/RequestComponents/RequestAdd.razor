@page "/RequestAdd/{ClientId}"

@inject RequestService  RequestService
@inject IUriHelper UriHelper

<h3>Add Request</h3>
<a href="/Requests/@ClientId" class="btn btn-primary">Back To Request List</a>

@if (@clientAndRequest == null)
{
    <div class="alert alert-dark">
        <span class="oi oi-fire"></span>
        No Client found
    </div>
}
else if (@clientAndRequest.Requests.Count == 0)
{
    <div class="alert alert-info">
        <span class="oi oi-eyedropper"></span>
        @clientAndRequest.Client.LastName,  @clientAndRequest.Client.Name has Zero request
    </div>
}


<h4>Client: @clientAndRequest.Client.LastName, @clientAndRequest.Client.Name</h4>

<div class="container">
    <form @onsubmit="@Submit">

        <div class="form-group">
            <label for="Title">Title</label>
            <input  type="text" class="form-control"  id="Title" @bind-Value="newRequest.Title" @bind-Value:event="oninput" />
        </div>
        <div class="form-group">
            <label for="Description">Description</label>
            <input  type="text" class="form-control" id="Description" @bind-Value="newRequest.Description" @bind-Value:event="oninput" />
        </div>
        <div class="form-group">
            <label for="Comments">Comments</label>            
            <textarea id="Comments" class="form-control" @bind-Value="newRequest.Comments" @bind-Value:event="oninput" rows="10" cols="50"/>
        </div>

        <div class="form-group">
            <label for="Priority">Priority: </label>
            <select id="Priority" class="form-control" @bind="@newRequest.Priority">
                <option>Low</option>
                <option>High</option>
                <option>Medium</option>
                <option>Urgent</option>
                <option>Completed</option>
            </select>
        </div>

        <button type="submit">Submit</button>
    </form>
</div>




@code {
    [Parameter]
    string ClientId { get; set; }

    private Request newRequest;

    private ClientRequest.Management.ViewModels.ClientRequests clientAndRequest;

    protected override async Task OnInitAsync()
    {
        clientAndRequest = await RequestService.GetClientRequestsAsync(Guid.Parse(ClientId));
        newRequest = new Request();
        newRequest.ClientId = Guid.Parse(ClientId);
    }

    private async void Submit()
    {
        if (newRequest.IsValidate())
        {
            await RequestService.AddRequestAsync(newRequest);
            UriHelper.NavigateTo("Requests/" + @ClientId);
        }
    }
}
